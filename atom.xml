<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[André Selmanagić]]></title>
  <link href="http://FunkMonkey.github.com/atom.xml" rel="self"/>
  <link href="http://FunkMonkey.github.com/"/>
  <updated>2012-09-12T20:33:08+02:00</updated>
  <id>http://FunkMonkey.github.com/</id>
  <author>
    <name><![CDATA[André]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Switching to Octopress]]></title>
    <link href="http://FunkMonkey.github.com/blog/2012/08/24/switching-to-octopress/"/>
    <updated>2012-08-24T22:49:00+02:00</updated>
    <id>http://FunkMonkey.github.com/blog/2012/08/24/switching-to-octopress</id>
    <content type="html"><![CDATA[<p>This is more a test post than anything else.</p>

<p>Switched from Joomla to <a href="http://octopress.org/">Octopress</a>. I will transfer the old pages one by one.</p>

<p>Here are some things that I have learned.</p>

<h4>Use 32-bit Python</h4>

<p>Rubypython seems to depend on 32-bit Python. I had 64-bit Python installed, which gave me weird errors like</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&#39;block in ffi_lib&#39;: Could not open library (LoadError)
</span></code></pre></td></tr></table></div></figure>


<p>followed by &#8220;library not found&#8221; or some gibberish unicode characters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 auto and references]]></title>
    <link href="http://FunkMonkey.github.com/blog/2012/01/01/c-plus-plus-11-auto-and-references/"/>
    <updated>2012-01-01T19:08:00+01:00</updated>
    <id>http://FunkMonkey.github.com/blog/2012/01/01/c-plus-plus-11-auto-and-references</id>
    <content type="html"><![CDATA[<p>I just started playing around with the <code>auto</code> keyword of the new C++ standard. I assumed a variable declared with <code>auto</code> would have the type of the according expression.</p>

<p>Though consider the following example:</p>

<figure class='code'><figcaption><span>Example of using auto  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[]</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">data</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">data2</span> <span class="o">=</span> <span class="n">getData</span><span class="p">();</span>
</span><span class='line'>  <span class="n">data</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the variables in the debugger, you see that <code>data</code> contains the values <code>1</code> and <code>2</code>, whereas <code>data2</code> only contains <code>1</code>, thus <code>data2</code> is not the same object as <code>data</code>. I assumed <code>data2</code> was of type <code>vector&lt;int&gt;&amp;</code> (the return type of <code>getData</code>), though it obviously just is <code>vector&lt;int&gt;</code>.</p>

<p>Declaring it as</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span><span class="o">&amp;</span> <span class="n">data2</span> <span class="o">=</span> <span class="n">getData</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>works though. <code>data2</code> is now a reference to <code>data</code>.</p>

<p>It makes sense, the standard defines it that way. Otherwise, how could you create a copy of the return value? Still it makes using <code>auto</code> a little more confusing &#8230;</p>
]]></content>
  </entry>
  
</feed>
